generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  login    String   @unique
  password String
  roles    String[]

  foundedOrganization Organization?        @relation("OrganizationFounder")
  organizationRequest OrganizationRequest? @relation("UserToRequest")
  organizationMember  OrganizationMember?

  notifications Notificaton[]
  matchInvites MatchInvite[]
  organizationInvites OrganizationInvite[]

  matches Match[] @relation("MatchParticipants")
}

model Organization {
  id          String @id @default(cuid())
  name        String
  description String

  founderId String @unique
  founder   User   @relation("OrganizationFounder", fields: [founderId], references: [id])

  members OrganizationMember[]
  matches Match[]
  invites OrganizationInvite[]
}

model OrganizationRequest {
  id          String        @id @default(cuid())
  name        String
  description String
  requestedAt DateTime      @default(now())
  status      RequestStatus @default(PENDING)

  userId String @unique
  user   User   @relation("UserToRequest", fields: [userId], references: [id])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String @unique
  organizationId String

  role     MemberRole @default(MEMBER)
  joinedAt DateTime   @default(now())

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
}

enum MemberRole {
  ADMIN
  MEMBER
  MODERATOR
}

model Match {
  id   String @id @default(cuid())
  name String @unique

  participantsCount Int
  date              String
  structure         String

  gender   String
  category String

  status MatchStatus @default(SCHEDULED)

  startAt     DateTime @default(now())
  requestedAt DateTime @default(now())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  participants User[]            @relation("MatchParticipants")
  invites MatchInvite[]
}

enum MatchStatus {
  SCHEDULED
  STARTED
  ENDED
}

model MatchInvite {
  id      String  @id @default(cuid())
  userId  String
  matchId String

  user  User   @relation(fields: [userId], references: [id])
  match Match  @relation(fields: [matchId], references: [id])

  createAt DateTime @default(now())
}

model OrganizationInvite {
  id      String  @id @default(cuid())
  userId  String
  organizationId String

  user  User   @relation(fields: [userId], references: [id])
  organization Organization  @relation(fields: [organizationId], references: [id])

  createAt DateTime @default(now())
}

model Notificaton {
  id    String @id @default(cuid())
  title String
  text  String

  createAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}
